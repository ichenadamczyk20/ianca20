Team MaJessIan (Ian Chen-Adamczyk, Jessica Yeung, Mary Shang)
SoftDev
LJ01 -- Le Voyage de Learnination avec Mongo, DeuxiÃ¨me Phase (Chapters 3 and 4)
2020-11-12

Query Comparison Operators
  * MQL has update operators (e.g. $inc, $set, $unset) to modify data in the database.
  * Query operators provide additional ways to located data within the database.
      * These include: $eq, $neq, $gt, $lt, $gte, and $lte.
          * Ex: {"tripduration": {"$lte": 70}} finds trips with trip durations less than 70.
          * Ex: {"usertype": {"$ne": "Subscriber"}} finds users who aren't subscribers.
          * These different filters can be chained in an object for "db.collection.find" or the Atlas UI.
  * $ precedes MQL operators and aggregation pipeline states, and allows access to field values.

Lab 1 Comparison Operators solution: db.zips.find({"pop": {"$lt": 1000}}).count() -> 8065
Lab 2 Comparison Operators solution: db.trips.find({"birth year": {"$gt": 1998}}).count()
                                        - db.trips.find({"birth year": {"$eq": 1998}}).count() -> 6

Logic Operators
  * $and, $or, $nor, $not are the logic operators, and they behave as, expected from experience in other languages.
  * $and, $or, and $nor need to be used in the form {<operator> : [{statement1},{statement2}, ...}, while $not can be
    used in the form {<operator>: {statement}}.
  * Implicit $and is used as the default operator when an operator is not specified. {field1: value1, field2: value2} is
    the same as {$and: [{field1: value1}, {field2: value2}]}. Explicit $and should be used when you need to include
    the same operator more than once in a query (e.g. {$and: [{$or: [..., ...]}, {$or: [..., ...]}}] ).

Quiz 1 solution: db.inspections.find({result: "Out of Business", sector: "Home Improvement Contractor - 100"}).count()
                    -> 4
Lab 1 Logic Operators solution: db.zips.find({"pop": {"$lte": 1000000, "$gte": 5000}}).count() -> 11193
Lab 2 Logic Operators solution: db.companies.find({"$and": [{"$or": [{"founded_year": 2004}, {"founded_month": 10}]},
                            {"$or": [{"category_code": "social"}, {"category_code": "web"}]}]}).count() -> 149

$expr
  * $expr, the expressive query operator, allows the use variables, conditional statements, and aggregation expressions
    within the query language.
  * $expr can compare two different fields in the same document. The dollar sign before the field name indicates that
    we are analyzing the value and not the field value across documents.
      * Ex: {"$expr" : {"$and": [ { "$gt": ["$tripduration", 1200] },
                                  { "$eq": ["$start station id", "$end station id"]} ]}

Lab $expr solution: db.companies.find({"$expr": {"$eq": ["$permalink", "$twitter_username"]}}).count() -> 1299

Array Operators
  * $push allows us to add an element to an array, or turn a field into an array field from a previously different type.
  * Searching {"amenities": ["Internet"]} only finds documents with field-value pair {"amenities": ["Internet"]}.
  * Searching {"amenities": ["Internet", "Wifi", ...]} only finds documents with field "amenities" with that exact
    value, size, and order.
  * {"amenities": {"$size": 20, "$all": ["Internet", "Wifi"]} will find documents with a value for "amenities" that has
    an exact size of 20 and contain at least "Internet" and "Wifi", in no particular order.

Lab 1 Array Operators solution: db.listingsAndReviews.find({"reviews": {"$size": 50}, "accommodates": {"$gt": 6}})
                                    -> {name: "Sunset Beach Lodge Retreat"}
Lab 2 Array Operators solution: db.listingsAndReviews.find({"amenities": {"$all": ["Changing table"]},
                                                            "property_type": "House"}).count() -> 11

Projections
  * Projections include certain results in the query result, indicated by a 1 or a 0. They are of format
    db.collection.find({ <query> }, { <projection> })
      * Ex: db.listingsAndReviews.find({"price": 1, "address": 1}).pretty() show only "_id", "price", and "address".
  * You can use only 1s or only 0s in a single query. (The exception is that you can always use "_id": 0)
      * Ex: db.listingsAndReviews.find({"price": 1, "address": 1, "_id": 0}).pretty() shows only "price" and "address".
  * The "$elemmatch" operator allows us to query for documents that contain an array field with at least one element
    that matches the specified query criteria, or project only the array elements with at least one element that matches
    the specified criteria.
      * Ex: db.grades.find({"class_id": 431}, {"scores": {"$elemMatch": {"score": {"$gt": 85} } } }).pretty()
              -> finds students with class_id 431, showing the _id and, if the score is greater than 85, the score.
      * Ex: db.grades.find({"scores": {"$elemMatch": {"type": "extra credit" } } }).pretty()
              -> finds students who had an extra credit grade.

Lab Array Operators and Projection solution: db.companies.find({"offices": {"$elemMatch": {"city": "Seattle"}}}).count()
                                                -> 117

Array Operators and Sub-Documents
  * To query a sub-document, use dot notation.
      * Ex: db.trips.findOne({"start station location.type": "Point"}) -> queries field "type" in sub-document
        "start station location"
  * Dot notation can also be chained.
  * ".0" finds the first array element.
      * Ex: db.companies.find({"relationships.0.person.last_name": "Zuckerberg"}) -> finds the company with the first
        element in the relationships array having a person with last name "Zuckerberg".
      * Ex: db.companies.find({"relationships.0.title": {"$regex": "CEO"}}) -> uses the $regex operator to find
        companies with a value containing "CEO" for the "title" field in the first element of the "relationships" Array
        element.
      * Ex: db.companies.find({ "relationships":
                                { "$elemMatch": { "is_past": true, "person.first_name": "Mark" } } }) -> finds
        number of companies with an executive named "Mark" who is no longer at that company.

Lab 1 Querying Arrays and Sub-Documents solution: db.trips.find({"start station location.coordinates.0":
                                                                    {"$lt": -74}}).count() -> 1928
Lab 2 Querying Arrays and Sub-Documents solution: db.inspections.find({"address.city": {"$eq": "NEW YORK"}}).count()
                                                                                            -> 18279