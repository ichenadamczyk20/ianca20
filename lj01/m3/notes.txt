Team ___ (Ian Chen-Adamczyk, Jessica Yeung, Mary Shang)
SoftDev
LJ01 -- Le Voyage de Learnination avec Mongo, Deuxi√®me Phase (Chapters 3 and 4)
2020-11-12

Inserting new documents from the Atlas UI:
  * Navigate to the collection
  * Click the "Insert Document" button on the top right
  * Enter data in JSON format and specify data types (use your mouse or the TAB key)
      * Use the "Object" data type to nest documents

Every document must have a unique "_id" value. "ObjectId()" is the default unique id. No other fields have special
    requirements. You should follow good practices, however, so keep data organized and consistent. MongoDB has "schema
    validation", in case you want to avoid inserting duplicate documents with different id's.

Inserting new documents from the mongo shell:
  * Use "mongoimport" with "--drop" to avoid a "duplicate key error" (another document with the same id already exists)
  * Alternatively, use "db.collection.insert({field: value})". (You'll want to first connect to the Atlas cluster,
    navigate to the database with "use db," and use "db.collection.findOne()" to see the format of the entries.)
      * If you get a "WriteResult" with "WriteError" 11000, then you have a duplicate key error, and you have to change
        the id, or not specify an "_id" value (so it automatically generates an ObjectId() value).
      * If you get an "nInserted" of "1", then your document was added successfully.
  * To insert multiple documents at once, use "db.collection.insert([{field: value}, {field: value}])" (inserting an
    array of documents). If it works, there will be no "writeErrors" and an "nInserted" of the number of documents
    you inputted.
      * If, in the array, there are documents with duplicate ids with those in the array or already in the db, only the
        documents in the array BEFORE the first occurrence of a duplicate id are inserted. That is, unless you use
        "db.collection.insert([{field: value}, {field: value}], {"ordered": false})"
  * Note that inserting a document into a collection that doesn't exist or in a database that doesn't exist will create
    that collection or database. (Also, removing all collections in a database will delete that database.)

Updating documents from the Atlas UI:
  * Hover over the document and select the edit button (the one that looks like a pencil)
  * To add objects to arrays, hover over the line number to the left of the array field, and select "Add Array Element"
  * Remember to select the write data type

Updating documents from the mongo shell:
  * "updateOne()", like "findOne()", will only affect the first document that satisfies the query.
  * "updateMany()", like "find()", will affect all documents that satisfy the query.
      * "db.zips.updateMany({"city": "HUDSON"}, {"$inc": {"pop": 10}})" adds 10 to the population of every field for
        the city of Hudson. (The "$inc" MQL operator increments the population field, but can be used for multiple
        fields at once.)
      * "db.zips.updateMany({"city": "HUDSON"}, {"$set": {"pop": 17630}})" sets the population of the city of Hudson to
        17630. (Like "$inc", it can be used for multiple fields, but it will also create fields if told to set fields
        that don't yet exist.
      * "db.grades.updateMany({"student_id": "250"}, {"$push": {"scores": {"type": "extra credit"}}})" will push
        an array element.

Deleting documents and collections from the Atlas UI:
  * Hovering over databases, collections, and documents will show a garbage can icon for deleting things.

Deleting documents and collections from the mongo shell:
  * To delete documents, "deleteOne()" (like "updateOne()" and "findOne()") should be used if and only if you are using
    id values. Otherwise, use "deleteMany()".
  * To delete collections, use "db.collection.drop()"
  * Deleted data is irrecoverable.